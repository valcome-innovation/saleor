//file:noinspection GroovyAssignabilityCheck
library('valcome_jenkins_functions')

node {
    withGoogleNotifications(getBuildInfo()) {
        withSshRemote('ARES_SSH', HOST, 'REMOTE') {
            stage("Pull Source") {
                gitForcePull(REMOTE, '~/git/saleor-platform/saleor/', BRANCH)
            }

            stage("Build Image") {
                build(REMOTE)
            }

            stage('Clean Workspace') {
                cleanWs()
            }
        }
    }
}

def build(remote) {
    def build = startBuild(remote)
    def runningBuild = getBuildStatus(remote, build.id)

    while (runningBuild.currentPhase != "COMPLETED") {
        sleep 15
        runningBuild = getBuildStatus(remote, build.id)
        echo "ID: " + runningBuild.id
        echo "Phase: " + runningBuild.currentPhase
        echo "Status: " + runningBuild.buildStatus
    }

    if (runningBuild.buildStatus == "STOPPED") {
        currentBuild.result = 'ABORTED'
    } else if (runningBuild.buildStatus != "SUCCEEDED") {
        throw new Exception('AWS Code Build failed (https://eu-central-1.console.aws.amazon.com/codesuite/codebuild/projects?region=eu-central-1)')
    }
}

def startBuild(remote) {
    def result = sshCommand remote: remote,
            command: """
                aws codebuild start-build \
                    --project-name saleor \
                    --source-version refs/heads/${BRANCH} \
                    --environment-variables-override \
                        name=TAG,value=${VERSION} \
                        name=STATIC_URL,value=${STATIC_URL}
            """

    def json = readJSON text: "" + result
    return json.build
}

def getBuildStatus(remote, build_id) {
    def result = sshCommand remote: remote,
            command: "aws codebuild batch-get-builds --ids ${build_id}"

    def json = readJSON text: "" + result
    return json.builds[0]
}

def getBuildInfo() {
    return """
        Image=saleor
        Version=${VERSION}
        Branch=${BRANCH}
    """
}
